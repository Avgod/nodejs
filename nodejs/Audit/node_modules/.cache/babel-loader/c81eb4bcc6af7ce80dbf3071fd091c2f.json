{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/nodejs/nodejs/Audit/src/components/logout/index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Button, Table } from 'antd';\nimport { useState } from 'react';\nimport 'antd/dist/antd.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Logout = () => {\n  _s();\n\n  const [tableData, setTableData] = useState([]);\n  const [showTable, setShowTable] = useState(false);\n\n  const handleSavebtn = () => {\n    let body = {\n      checklist_name: 'cl_6_sssss'\n    };\n    axios.post('http://localhost:4000/checklist/checkListData', body).then(res => {\n      console.log('res', res.data.data[0]);\n      setTableData(res.data.data[0]);\n      setShowTable(true);\n    });\n  };\n\n  const TableColumns = [];\n  tableData.forEach((data, i) => {\n    for (const k in data) {\n      if (TableColumns.indexOf(k) === -1) {\n        TableColumns.push(k);\n      }\n    }\n  });\n  const TableColumnsData = [];\n  TableColumns.forEach((data, i) => {\n    TableColumnsData.push({\n      title: data.replace(/_/g, ' '),\n      dataIndex: data,\n      key: i,\n      width: 150\n    });\n  });\n\n  const handleClear = () => {\n    localStorage.removeItem('accessToken');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Report Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleSavebtn,\n      style: {\n        marginBottom: '10px'\n      },\n      children: \"save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleClear,\n      style: {\n        marginBottom: '10px'\n      },\n      children: \"clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), showTable && /*#__PURE__*/_jsxDEV(Table, {\n      columns: TableColumnsData,\n      dataSource: tableData,\n      scroll: {\n        x: 200,\n        y: 400\n      },\n      bordered: true,\n      pagination: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Logout, \"YP6qtILuIYcdDBqve30+lPH7G4o=\");\n\n_c = Logout;\nexport default Logout; // import React from 'react';\n// import {Button, Table, Form, Input} from 'antd';\n// import {useState,useEffect, useContext, useRef} from 'react'\n// import 'antd/dist/antd.css';\n// import axios from 'axios';\n// const EditableContext = React.createContext(null);\n// const Logout = () => {\n//   const [tableData, setTableData] = useState([]);\n//   const [showTable, setShowTable] = useState(false)\n//   const EditableRow = ({ index, ...props }) => {\n//   const [form] = Form.useForm();\n//   return (\n//     <Form form={form} component={false}>\n//       <EditableContext.Provider value={form}>\n//         <tr {...props} />\n//       </EditableContext.Provider>\n//     </Form>\n//   );\n// };\n// const EditableCell = ({\n//   title,\n//   editable,\n//   children,\n//   dataIndex,\n//   record,\n//   handleSave,\n//   ...restProps\n// }) => {\n//   const [editing, setEditing] = useState(false);\n//   const inputRef = useRef(null);\n//   const form = useContext(EditableContext);\n//   useEffect(() => {\n//     if (editing) {\n//       inputRef.current.focus();\n//     }\n//   }, [editing]);\n//   const toggleEdit = () => {\n//     setEditing(!editing);\n//     form.setFieldsValue({\n//       [dataIndex]: record[dataIndex]\n//     });\n//   };\n//   const save = async () => {\n//     try {\n//       const values = await form.validateFields();\n//       toggleEdit();\n//       handleSave({ ...record, ...values });\n//     } catch (errInfo) {\n//       console.log(\"Save failed:\", errInfo);\n//     }\n//   };\n//   let childNode = children;\n//   if (editable) {\n//     childNode = editing ? (\n//       <Form.Item\n//         style={{\n//           margin: 0\n//         }}\n//         name={dataIndex}\n//         rules={[\n//           {\n//             required: true,\n//             message: `${title} is required.`\n//           }\n//         ]}\n//       >\n//         <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n//       </Form.Item>\n//     ) : (\n//       <div\n//         className=\"editable-cell-value-wrap\"\n//         style={{\n//           paddingRight: 24\n//         }}\n//         onClick={toggleEdit}\n//       >\n//         {children}\n//       </div>\n//     );\n//   }\n//   return <td {...restProps}>{childNode}</td>;\n// };\n// const components = {\n//   body: {\n//     row: EditableRow,\n//     cell: EditableCell\n//   }\n// };\n//   const handleSavebtn = () => {\n//     let body = {\n//       checklist_name:'cl_1_checklist'\n//     }\n//     axios\n//       .post('http://localhost:4000/checklist/checkListData',body)\n//       .then((res) => {\n//         console.log('res', res.data.data[0]);\n//         setTableData(res.data.data[0]);\n//         setShowTable(true);\n//       });\n//   };\n//   const TableColumns = [];\n//   tableData.forEach((data, i) => {\n//     for (const k in data) {\n//       if (TableColumns.indexOf(k) === -1) {\n//         TableColumns.push(k);\n//       }\n//     }\n//   });\n//   const TableColumnsData = [];\n//   TableColumns.forEach((data, i) => {\n//     TableColumnsData.push({\n//       title: data.replace(/_/g, ' '),\n//       dataIndex: data,\n//       key: i,\n//       width: 150,\n//       editable: true\n//     });\n//   });\n//   const handleSave = (row) => {\n//     console.log('row',row)\n//     const newData = [...tableData];\n//     const index = newData.findIndex((item) => row.key === item.key);\n//     const item = newData[index];\n//     newData.splice(index, 1, { ...item, ...row });\n//     setTableData(newData)\n//   };\n//   const columns = TableColumnsData.map(col => {\n//     if(!col.editable) {\n//       return col;\n//     }\n//     return {\n//       ...col,\n//       onCell: record => ({\n//         record,\n//         editable: col.editable,\n//         dataIndex: col.dataIndex,\n//         title: col.title.replace(/_/g, ' '),\n//         handleSave: handleSave\n//       })\n//     }\n//   })\n//   console.log(\"col\",columns)\n//   return (\n//     <div>\n//       <h1>Report Page</h1>\n//       <Button onClick={handleSavebtn} style={{marginBottom:'10px'}}>save</Button>\n//       {showTable && <Table components={components} columns={columns} dataSource={tableData} scroll={{ x: 200, y: 400 }} bordered pagination={false}/>}\n//     </div>\n//   );\n// }\n// export default Logout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Logout\");","map":{"version":3,"sources":["/home/ubuntu/nodejs/nodejs/Audit/src/components/logout/index.js"],"names":["React","Button","Table","useState","axios","Logout","tableData","setTableData","showTable","setShowTable","handleSavebtn","body","checklist_name","post","then","res","console","log","data","TableColumns","forEach","i","k","indexOf","push","TableColumnsData","title","replace","dataIndex","key","width","handleClear","localStorage","removeItem","marginBottom","x","y"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAgBC,KAAhB,QAA4B,MAA5B;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,OAAO,oBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAGA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AAEnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;;AAGA,QAAMO,aAAa,GAAG,MAAM;AAC1B,QAAIC,IAAI,GAAG;AACTC,MAAAA,cAAc,EAAC;AADN,KAAX;AAGAR,IAAAA,KAAK,CACFS,IADH,CACQ,+CADR,EACwDF,IADxD,EAEGG,IAFH,CAESC,GAAD,IAAS;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,GAAG,CAACG,IAAJ,CAASA,IAAT,CAAc,CAAd,CAAnB;AACAX,MAAAA,YAAY,CAACQ,GAAG,CAACG,IAAJ,CAASA,IAAT,CAAc,CAAd,CAAD,CAAZ;AACAT,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,KANH;AAOD,GAXD;;AAaA,QAAMU,YAAY,GAAG,EAArB;AACAb,EAAAA,SAAS,CAACc,OAAV,CAAkB,CAACF,IAAD,EAAOG,CAAP,KAAa;AAC7B,SAAK,MAAMC,CAAX,IAAgBJ,IAAhB,EAAsB;AACpB,UAAIC,YAAY,CAACI,OAAb,CAAqBD,CAArB,MAA4B,CAAC,CAAjC,EAAoC;AAClCH,QAAAA,YAAY,CAACK,IAAb,CAAkBF,CAAlB;AACD;AACF;AACF,GAND;AASA,QAAMG,gBAAgB,GAAG,EAAzB;AACAN,EAAAA,YAAY,CAACC,OAAb,CAAqB,CAACF,IAAD,EAAOG,CAAP,KAAa;AAChCI,IAAAA,gBAAgB,CAACD,IAAjB,CAAsB;AACpBE,MAAAA,KAAK,EAAER,IAAI,CAACS,OAAL,CAAa,IAAb,EAAmB,GAAnB,CADa;AAEpBC,MAAAA,SAAS,EAAEV,IAFS;AAGpBW,MAAAA,GAAG,EAAER,CAHe;AAIpBS,MAAAA,KAAK,EAAE;AAJa,KAAtB;AAMD,GAPD;;AASA,QAAMC,WAAW,GAAG,MAAM;AACxBC,IAAAA,YAAY,CAACC,UAAb,CAAwB,aAAxB;AACD,GAFD;;AAIA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEvB,aAAjB;AAAgC,MAAA,KAAK,EAAE;AAACwB,QAAAA,YAAY,EAAC;AAAd,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEH,WAAjB;AAA8B,MAAA,KAAK,EAAE;AAACG,QAAAA,YAAY,EAAC;AAAd,OAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,EAIG1B,SAAS,iBAAI,QAAC,KAAD;AAAO,MAAA,OAAO,EAAEiB,gBAAhB;AAAkC,MAAA,UAAU,EAAEnB,SAA9C;AAAyD,MAAA,MAAM,EAAE;AAAE6B,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE;AAAb,OAAjE;AAAqF,MAAA,QAAQ,MAA7F;AAA8F,MAAA,UAAU,EAAE;AAA1G;AAAA;AAAA;AAAA;AAAA,YAJhB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAnDD;;GAAM/B,M;;KAAAA,M;AAoDN,eAAeA,MAAfsourcesContent":["import React from 'react';\nimport {Button, Table} from 'antd';\nimport {useState} from 'react'\nimport 'antd/dist/antd.css';\nimport axios from 'axios';\n\n\nconst Logout = () => {\n\n  const [tableData, setTableData] = useState([]);\n  const [showTable, setShowTable] = useState(false)\n\n  \n  const handleSavebtn = () => {\n    let body = {\n      checklist_name:'cl_6_sssss'\n    }\n    axios\n      .post('http://localhost:4000/checklist/checkListData',body)\n      .then((res) => {\n        console.log('res', res.data.data[0]);\n        setTableData(res.data.data[0]);\n        setShowTable(true);\n      });\n  };\n\n  const TableColumns = [];\n  tableData.forEach((data, i) => {\n    for (const k in data) {\n      if (TableColumns.indexOf(k) === -1) {\n        TableColumns.push(k);\n      }\n    }\n  });\n\n\n  const TableColumnsData = [];\n  TableColumns.forEach((data, i) => {\n    TableColumnsData.push({\n      title: data.replace(/_/g, ' '),\n      dataIndex: data,\n      key: i,\n      width: 150,\n    });\n  });\n\n  const handleClear = () => {\n    localStorage.removeItem('accessToken');\n  }\n\n  return (\n    <div>\n      <h1>Report Page</h1>\n      <Button onClick={handleSavebtn} style={{marginBottom:'10px'}}>save</Button>\n      <Button onClick={handleClear} style={{marginBottom:'10px'}}>clear</Button>\n      {showTable && <Table columns={TableColumnsData} dataSource={tableData} scroll={{ x: 200, y: 400 }} bordered pagination={false}/>}\n    </div>\n  );\n}\nexport default Logout;\n\n\n\n\n\n// import React from 'react';\n// import {Button, Table, Form, Input} from 'antd';\n// import {useState,useEffect, useContext, useRef} from 'react'\n// import 'antd/dist/antd.css';\n// import axios from 'axios';\n// const EditableContext = React.createContext(null);\n\n\n// const Logout = () => {\n\n//   const [tableData, setTableData] = useState([]);\n//   const [showTable, setShowTable] = useState(false)\n\n//   const EditableRow = ({ index, ...props }) => {\n//   const [form] = Form.useForm();\n//   return (\n//     <Form form={form} component={false}>\n//       <EditableContext.Provider value={form}>\n//         <tr {...props} />\n//       </EditableContext.Provider>\n//     </Form>\n//   );\n// };\n\n// const EditableCell = ({\n//   title,\n//   editable,\n//   children,\n//   dataIndex,\n//   record,\n//   handleSave,\n//   ...restProps\n// }) => {\n//   const [editing, setEditing] = useState(false);\n//   const inputRef = useRef(null);\n//   const form = useContext(EditableContext);\n//   useEffect(() => {\n//     if (editing) {\n//       inputRef.current.focus();\n//     }\n//   }, [editing]);\n\n//   const toggleEdit = () => {\n//     setEditing(!editing);\n//     form.setFieldsValue({\n//       [dataIndex]: record[dataIndex]\n//     });\n//   };\n\n//   const save = async () => {\n//     try {\n//       const values = await form.validateFields();\n//       toggleEdit();\n//       handleSave({ ...record, ...values });\n//     } catch (errInfo) {\n//       console.log(\"Save failed:\", errInfo);\n//     }\n//   };\n\n//   let childNode = children;\n\n//   if (editable) {\n//     childNode = editing ? (\n//       <Form.Item\n//         style={{\n//           margin: 0\n//         }}\n//         name={dataIndex}\n//         rules={[\n//           {\n//             required: true,\n//             message: `${title} is required.`\n//           }\n//         ]}\n//       >\n//         <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n//       </Form.Item>\n//     ) : (\n//       <div\n//         className=\"editable-cell-value-wrap\"\n//         style={{\n//           paddingRight: 24\n//         }}\n//         onClick={toggleEdit}\n//       >\n//         {children}\n//       </div>\n//     );\n//   }\n\n//   return <td {...restProps}>{childNode}</td>;\n// };\n\n// const components = {\n//   body: {\n//     row: EditableRow,\n//     cell: EditableCell\n//   }\n// };\n\n//   const handleSavebtn = () => {\n//     let body = {\n//       checklist_name:'cl_1_checklist'\n//     }\n//     axios\n//       .post('http://localhost:4000/checklist/checkListData',body)\n//       .then((res) => {\n//         console.log('res', res.data.data[0]);\n//         setTableData(res.data.data[0]);\n//         setShowTable(true);\n//       });\n//   };\n\n//   const TableColumns = [];\n//   tableData.forEach((data, i) => {\n//     for (const k in data) {\n//       if (TableColumns.indexOf(k) === -1) {\n//         TableColumns.push(k);\n//       }\n//     }\n//   });\n\n//   const TableColumnsData = [];\n//   TableColumns.forEach((data, i) => {\n//     TableColumnsData.push({\n//       title: data.replace(/_/g, ' '),\n//       dataIndex: data,\n//       key: i,\n//       width: 150,\n//       editable: true\n//     });\n//   });\n\n\n//   const handleSave = (row) => {\n//     console.log('row',row)\n//     const newData = [...tableData];\n//     const index = newData.findIndex((item) => row.key === item.key);\n//     const item = newData[index];\n//     newData.splice(index, 1, { ...item, ...row });\n//     setTableData(newData)\n//   };\n\n//   const columns = TableColumnsData.map(col => {\n//     if(!col.editable) {\n//       return col;\n//     }\n//     return {\n//       ...col,\n//       onCell: record => ({\n//         record,\n//         editable: col.editable,\n//         dataIndex: col.dataIndex,\n//         title: col.title.replace(/_/g, ' '),\n//         handleSave: handleSave\n//       })\n//     }\n//   })\n\n//   console.log(\"col\",columns)\n\n//   return (\n//     <div>\n//       <h1>Report Page</h1>\n//       <Button onClick={handleSavebtn} style={{marginBottom:'10px'}}>save</Button>\n//       {showTable && <Table components={components} columns={columns} dataSource={tableData} scroll={{ x: 200, y: 400 }} bordered pagination={false}/>}\n//     </div>\n//   );\n// }\n// export default Logout;\n"]},"metadata":{},"sourceType":"module"}