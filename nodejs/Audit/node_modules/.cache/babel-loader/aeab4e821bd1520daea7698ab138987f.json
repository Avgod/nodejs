{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/nodejs/nodejs/Audit/src/components/checklist/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport 'antd/dist/antd.css';\nimport * as XLSX from 'xlsx';\nimport { Table, Button, Space, Popconfirm, Upload, PageHeader, Input, message } from 'antd';\nimport { UploadOutlined, UserOutlined, DatabaseFilled } from '@ant-design/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Checklist = () => {\n  _s();\n\n  const [showTable, setShowTable] = useState(false);\n  const [tableData, setTableData] = useState([]);\n  const [sendData, setSendData] = useState([]);\n  const [checklistname, setChecklistName] = useState('');\n  const [checklisttype, setChecklistType] = useState('');\n\n  const handleUpload = e => {\n    setShowTable(true);\n    console.log('file imported -->', e.file.name);\n    const reader = new FileReader(); // evt = on_file_select event\n\n    reader.onload = e => {\n      /* Parse data */\n      const data = e.target.result;\n      const wb = XLSX.read(data, {\n        type: 'binary'\n      });\n      const sheet = wb.SheetNames[0];\n      const excel = wb.Sheets[sheet];\n      const excel_entry = XLSX.utils.sheet_to_json(excel, {\n        header: 1,\n        blankrows: false\n      });\n      console.log('Sheet data', excel_entry);\n      const excel_data = [];\n      excel_entry.forEach((data, i) => {\n        if (data[0] === undefined) {\n          data.shift();\n          excel_data.push(data);\n        } else {\n          excel_data.push(data);\n        }\n      });\n      console.log('excel data', excel_data);\n      const heading_name = [];\n      excel_data.forEach(data => {\n        if (data.length === 1) {\n          const index = excel_data.indexOf(data);\n          heading_name.push(index);\n        }\n      });\n      console.log(\"heading name\", heading_name.length);\n\n      if (heading_name.length > 1) {\n        let Table_data = [];\n\n        for (let i = 0; i < heading_name.length; i++) {\n          const array = excel_data.slice(heading_name[i], heading_name[i + 1]);\n          const keys = array[1];\n          console.log('keys', keys);\n          const values = array.slice(2);\n          let objects = values.map(array => {\n            const object = {};\n            keys.forEach((key, i) => object[key.trim()] = array[i]);\n            return object;\n          });\n\n          if (array[0].length === 1) {\n            // Object.keys(objects).map((obj) => objects[obj].Type = array[0].toString());\n            objects = objects.map((obj, i) => {\n              let keyValues = Object.entries(obj);\n              keyValues.splice(1, 0, ['Type', array[0].toString()]);\n              obj = Object.fromEntries(keyValues);\n              return obj;\n            });\n          }\n\n          console.log('objects', objects);\n          Table_data = [...Table_data, ...objects];\n        }\n\n        console.log(\"Table data\", Table_data);\n        const result = [];\n        Table_data.forEach(data => {\n          const entries = Object.entries(data);\n          const filtered = entries.filter(_ref => {\n            let [key, val] = _ref;\n            return val !== undefined;\n          });\n          const output = Object.fromEntries(filtered);\n          result.push(output);\n        }); // console.log('filtered columns', result);\n\n        setTableData(result); // Table_data.forEach((obj) => {\n        //   Object.keys(obj).forEach((key) => {\n        //     const trimmedKey = key.trim();\n        //     if (key !== trimmedKey) {\n        //       obj[trimmedKey] = obj[key];\n        //       delete obj[key];\n        //     }\n        //   });\n        // });\n\n        console.log('Original columns', Table_data);\n        setSendData(Table_data);\n      } else {\n        const keys = excel_data[1];\n        const values = excel_data.slice(2);\n        let objects = values.map(array => {\n          const object = {};\n          keys.forEach((key, i) => object[key] = array[i]);\n          return object;\n        });\n\n        if (excel_data[0].length === 1) {\n          // Object.keys(objects).map((obj) => objects[obj].Type = excel_data[0].toString());\n          objects = objects.map((obj, i) => {\n            let keyValues = Object.entries(obj);\n            keyValues.splice(1, 0, ['Type', excel_data[0].toString()]);\n            obj = Object.fromEntries(keyValues);\n            return obj;\n          });\n        }\n\n        const result = [];\n        objects.forEach(data => {\n          const entries = Object.entries(data);\n          const filtered = entries.filter(_ref2 => {\n            let [key, val] = _ref2;\n            return val !== undefined;\n          });\n          const output = Object.fromEntries(filtered);\n          result.push(output);\n        }); // console.log('filtered columns', result);\n\n        setTableData(result); // objects.forEach((obj) => {\n        //   Object.keys(obj).forEach((key) => {\n        //     const trimmedKey = key.trim();\n        //     if (key !== trimmedKey) {\n        //       obj[trimmedKey] = obj[key];\n        //       delete obj[key];\n        //     }\n        //   });\n        // });\n\n        console.log('Original columns', objects);\n        setSendData(objects);\n      }\n    };\n\n    reader.readAsBinaryString(e.file);\n  };\n\n  const TableColumns = [];\n  tableData.forEach((data, i) => {\n    for (const k in data) {\n      if (TableColumns.indexOf(k) === -1) {\n        TableColumns.push(k);\n      }\n    }\n  });\n  const ColumnHeader = [];\n  sendData.forEach((header, j) => {\n    for (const l in header) {\n      if (ColumnHeader.indexOf(l) === -1) {\n        ColumnHeader.push(l);\n      }\n    }\n  }); // console.log('tablecolumns', ColumnHeader);\n\n  const TableColumnsData = [];\n  TableColumns.forEach((data, i) => {\n    TableColumnsData.push({\n      title: data,\n      dataIndex: data,\n      key: i,\n      width: 150\n    });\n  });\n\n  const handleNameChange = e => {\n    setChecklistName(e.target.value);\n  };\n\n  const handleTypeChange = e => {\n    setChecklistType(e.target.value);\n  };\n\n  const handleSaveClick = (sendData, ColumnHeader) => {\n    const obj = {\n      name: checklistname,\n      type: checklisttype\n    };\n    console.log('object', obj);\n    console.log('send data', sendData);\n    console.log('ColumnHeader', ColumnHeader);\n    fetch('http://localhost:4000/checklist/saveChecklist', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        ColumnHeader,\n        sendData,\n        obj\n      })\n    }).then(Data => {\n      console.log(Data);\n\n      if (Data.status === 200) {\n        message.success('File Uploaded');\n      } else {\n        message.error('File Not Uploaded');\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '16px'\n      },\n      children: /*#__PURE__*/_jsxDEV(PageHeader, {\n        style: {\n          fontSize: '32px'\n        },\n        children: \"Checklist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          justifyContent: 'space-between'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'center',\n            marginRight: '20px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              marginRight: '5px'\n            },\n            children: \"Name: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Enter Checklist Name\",\n            prefix: /*#__PURE__*/_jsxDEV(UserOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 63\n            }, this),\n            onChange: handleNameChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              marginRight: '5px'\n            },\n            children: \"Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Enter Checklist Type\",\n            prefix: /*#__PURE__*/_jsxDEV(DatabaseFilled, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 63\n            }, this),\n            onChange: handleTypeChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Space, {\n          children: [/*#__PURE__*/_jsxDEV(Upload, {\n            accept: \".xlsx, .xlsm\",\n            showUploadList: false,\n            beforeUpload: file => // Prevent upload\n            false,\n            onChange: handleUpload,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"primary\",\n              children: [/*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 17\n              }, this), \"Upload Checklist\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            ghost: true,\n            onClick: () => handleSaveClick(sendData, ColumnHeader),\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Popconfirm, {\n            title: \"Are you sure delete this Record?\",\n            okText: \"Yes\",\n            cancelText: \"No\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              danger: true,\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), showTable && /*#__PURE__*/_jsxDEV(Table, {\n      columns: TableColumnsData,\n      dataSource: tableData,\n      rowKey: Math.random().toString(),\n      scroll: {\n        x: 200,\n        y: 400\n      },\n      pagination: false,\n      bordered: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checklist, \"7s3WaTMJgPbHDlX9srWFXGKGryE=\");\n\n_c = Checklist;\nexport default Checklist;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checklist\");","map":{"version":3,"sources":["/home/ubuntu/nodejs/nodejs/Audit/src/components/checklist/index.js"],"names":["React","useState","XLSX","Table","Button","Space","Popconfirm","Upload","PageHeader","Input","message","UploadOutlined","UserOutlined","DatabaseFilled","Checklist","showTable","setShowTable","tableData","setTableData","sendData","setSendData","checklistname","setChecklistName","checklisttype","setChecklistType","handleUpload","e","console","log","file","name","reader","FileReader","onload","data","target","result","wb","read","type","sheet","SheetNames","excel","Sheets","excel_entry","utils","sheet_to_json","header","blankrows","excel_data","forEach","i","undefined","shift","push","heading_name","length","index","indexOf","Table_data","array","slice","keys","values","objects","map","object","key","trim","obj","keyValues","Object","entries","splice","toString","fromEntries","filtered","filter","val","output","readAsBinaryString","TableColumns","k","ColumnHeader","j","l","TableColumnsData","title","dataIndex","width","handleNameChange","value","handleTypeChange","handleSaveClick","fetch","method","headers","body","JSON","stringify","then","Data","status","success","error","marginBottom","fontSize","display","flexDirection","alignItems","justifyContent","marginRight","Math","random","x","y"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport 'antd/dist/antd.css';\nimport * as XLSX from 'xlsx';\nimport {\n  Table, Button, Space, Popconfirm, Upload, PageHeader, Input, message\n} from 'antd';\nimport { UploadOutlined, UserOutlined, DatabaseFilled } from '@ant-design/icons';\n\nconst Checklist = () => {\n  const [showTable, setShowTable] = useState(false);\n  const [tableData, setTableData] = useState([]);\n  const [sendData, setSendData] = useState([]);\n  const [checklistname, setChecklistName] = useState('');\n  const [checklisttype, setChecklistType] = useState('');\n\n  const handleUpload = (e) => {\n    setShowTable(true);\n    console.log('file imported -->', e.file.name);\n    const reader = new FileReader();\n    // evt = on_file_select event\n    reader.onload = (e) => {\n      /* Parse data */\n      const data = e.target.result;\n      const wb = XLSX.read(data, { type: 'binary' });\n      const sheet = wb.SheetNames[0];\n      const excel = wb.Sheets[sheet];\n      const excel_entry = XLSX.utils.sheet_to_json(excel, { header: 1, blankrows: false });\n      console.log('Sheet data', excel_entry);\n\n      const excel_data = [];\n      excel_entry.forEach((data, i) => {\n        if (data[0] === undefined) {\n          data.shift();\n          excel_data.push(data);\n        } else {\n          excel_data.push(data);\n        }\n      });\n      console.log('excel data', excel_data);\n\n      const heading_name = [];\n      excel_data.forEach((data) => {\n        if (data.length === 1) {\n          const index = excel_data.indexOf(data);\n          heading_name.push(index);\n        }\n      });\n      console.log(\"heading name\",heading_name.length);\n\n      if (heading_name.length > 1) {\n        let Table_data = [];\n        for (let i = 0; i < heading_name.length; i++) {\n          const array = excel_data.slice(heading_name[i], heading_name[i + 1]);\n\n          const keys = array[1];\n          console.log('keys',keys)\n\n          const values = array.slice(2);\n\n          let objects = values.map((array) => {\n            const object = {};\n            keys.forEach((key, i) => object[key.trim()] = array[i]);\n            return object;\n          });\n          \n          if (array[0].length === 1) {\n            // Object.keys(objects).map((obj) => objects[obj].Type = array[0].toString());\n           objects = objects.map((obj,i) => {\n            let keyValues = Object.entries(obj); \n            keyValues.splice(1,0,['Type',array[0].toString()]); \n            obj = Object.fromEntries(keyValues) \n            return obj;\n            })\n          }\n          console.log('objects',objects)\n          Table_data = [...Table_data, ...objects];\n        }\n        console.log(\"Table data\",Table_data)\n\n        const result = [];\n        Table_data.forEach((data) => {\n          const entries = Object.entries(data);\n          const filtered = entries.filter(([key, val]) => val !== undefined);\n          const output = Object.fromEntries(filtered);\n          result.push(output);\n        });\n\n        // console.log('filtered columns', result);\n        setTableData(result);\n\n        // Table_data.forEach((obj) => {\n        //   Object.keys(obj).forEach((key) => {\n        //     const trimmedKey = key.trim();\n        //     if (key !== trimmedKey) {\n        //       obj[trimmedKey] = obj[key];\n        //       delete obj[key];\n        //     }\n        //   });\n        // });\n        console.log('Original columns', Table_data);\n        setSendData(Table_data);\n      } else {\n        const keys = excel_data[1];\n        const values = excel_data.slice(2);\n\n        let objects = values.map((array) => {\n          const object = {};\n          keys.forEach((key, i) => object[key] = array[i]);\n          return object;\n        });\n\n        if (excel_data[0].length === 1) {\n          // Object.keys(objects).map((obj) => objects[obj].Type = excel_data[0].toString());\n          objects = objects.map((obj,i) => {\n            let keyValues = Object.entries(obj); \n            keyValues.splice(1,0,['Type',excel_data[0].toString()]); \n            obj = Object.fromEntries(keyValues) \n            return obj;\n            })\n        }\n\n        const result = [];\n        objects.forEach((data) => {\n          const entries = Object.entries(data);\n          const filtered = entries.filter(([key, val]) => val !== undefined);\n          const output = Object.fromEntries(filtered);\n          result.push(output);\n        });\n\n        // console.log('filtered columns', result);\n        setTableData(result);\n\n        // objects.forEach((obj) => {\n        //   Object.keys(obj).forEach((key) => {\n        //     const trimmedKey = key.trim();\n        //     if (key !== trimmedKey) {\n        //       obj[trimmedKey] = obj[key];\n        //       delete obj[key];\n        //     }\n        //   });\n        // });\n        console.log('Original columns', objects);\n        setSendData(objects);\n      }\n    };\n    reader.readAsBinaryString(e.file);\n  };\n\n  const TableColumns = [];\n  tableData.forEach((data, i) => {\n    for (const k in data) {\n      if (TableColumns.indexOf(k) === -1) {\n        TableColumns.push(k);\n      }\n    }\n  });\n\n  const ColumnHeader = [];\n  sendData.forEach((header, j) => {\n    for (const l in header) {\n      if (ColumnHeader.indexOf(l) === -1) {\n        ColumnHeader.push(l);\n      }\n    }\n  });\n  // console.log('tablecolumns', ColumnHeader);\n\n  const TableColumnsData = [];\n  TableColumns.forEach((data, i) => {\n    TableColumnsData.push({\n      title: data,\n      dataIndex: data,\n      key: i,\n      width: 150,\n    });\n  });\n\n  const handleNameChange = (e) => {\n    setChecklistName(e.target.value);\n  };\n\n  const handleTypeChange = (e) => {\n    setChecklistType(e.target.value);\n  };\n\n  const handleSaveClick = (sendData, ColumnHeader) => {\n    const obj = {\n      name: checklistname,\n      type: checklisttype,\n    };\n    console.log('object', obj);\n    console.log('send data', sendData);\n    console.log('ColumnHeader', ColumnHeader);\n    fetch('http://localhost:4000/checklist/saveChecklist', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ColumnHeader, sendData, obj}),\n    }).then((Data) => {\n      console.log(Data);\n      if(Data.status === 200) {\n        message.success('File Uploaded');\n      }\n      else{\n        message.error('File Not Uploaded');\n      }\n    });\n  };\n\n  return (\n    <div>\n      <div style={{ marginBottom: '16px' }}>\n        <PageHeader style={{ fontSize: '32px' }}>Checklist</PageHeader>\n      </div>\n      <div style={{\n        display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', marginBottom: '20px',\n      }}\n      >\n        <div style={{\n          display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between',\n        }}\n        >\n          <div style={{\n            display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'center', marginRight: '20px',\n          }}\n          >\n            <label style={{ marginRight: '5px' }}>Name: </label>\n            <Input placeholder=\"Enter Checklist Name\" prefix={<UserOutlined />} onChange={handleNameChange} />\n          </div>\n          <div style={{\n            display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'center',\n          }}\n          >\n            <label style={{ marginRight: '5px' }}>Type:</label>\n            <Input placeholder=\"Enter Checklist Type\" prefix={<DatabaseFilled />} onChange={handleTypeChange} />\n          </div>\n        </div>\n        <div>\n          <Space>\n            <Upload\n              accept=\".xlsx, .xlsm\"\n              showUploadList={false}\n              beforeUpload={(file) =>\n                // Prevent upload\n                false}\n              onChange={handleUpload}\n            >\n              <Button type=\"primary\">\n                <UploadOutlined />\n                Upload Checklist\n</Button>\n            </Upload>\n            <Button type=\"primary\" ghost onClick={() => handleSaveClick(sendData, ColumnHeader)}>Save</Button>\n            <Popconfirm title=\"Are you sure delete this Record?\" okText=\"Yes\" cancelText=\"No\">\n              <Button danger>Delete</Button>\n            </Popconfirm>\n          </Space>\n        </div>\n      </div>\n\n      {showTable && <Table columns={TableColumnsData} dataSource={tableData} rowKey={Math.random().toString()} scroll={{ x: 200, y: 400 }} pagination={false} bordered />}\n    </div>\n  );\n};\n\nexport default Checklist;\n"]},"metadata":{},"sourceType":"module"}